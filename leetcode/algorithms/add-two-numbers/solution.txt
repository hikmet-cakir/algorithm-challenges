/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
List<Integer> sumElements = new ArrayList<>();
        int carry = 0;
        while(l1 != null || l2 != null) {
            if(l2 == null) {
                int sum = l1.val + carry;
                l1 = l1.next;
                carry = sum >= 10 ? sum / 10 : 0;
                sum = sum % 10;
                sumElements.add(sum);
                continue;
            }

            if(l1 == null) {
                int sum = l2.val + carry;
                l2 = l2.next;
                carry = sum >= 10 ? sum / 10 : 0;
                sum = sum % 10;
                sumElements.add(sum);
                continue;
            }

            int sum = l1.val + l2.val + carry;
            carry = sum >= 10 ? sum / 10 : 0;
            sum = sum % 10;

            sumElements.add(sum);

            l1 = l1.next;
            l2 = l2.next;
        }

        if(carry > 0) {
            sumElements.add(carry);
        }

        ListNode head = new ListNode(sumElements.get(0));
        ListNode pre = head;
        for(int i = 1; i < sumElements.size(); i++) {
            ListNode next = new ListNode(sumElements.get(i));
            pre.next = next;
            pre = next;
        }
        return head;
    }
}